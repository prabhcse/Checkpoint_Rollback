package pack;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.StringTokenizer;

/*
 * Working of data structures:
 * 
 * Index of LLR, FLS, LLS
 * correspond to 
 * Index of neighbors
 * 
 * Value stored at neighbor's index
 * correspond to
 * Index of Node, Port, Clock
 */

public class Project3 
{
	// Multiple Instances of Project
	public static ArrayList<Integer> index = new ArrayList<Integer>();
	// Machine names
	public static ArrayList<String> node = new ArrayList<String>();
	// Machine ports
	public static ArrayList<Integer> port = new ArrayList<Integer>();
	// Sequence of checkpoint or recovery
	public static ArrayList<String> sequence = new ArrayList<String>();
	// Number of nodes
	public static int n = 0;
	public static int count = -1;
	
	public static void main(String[] args) 
	{
		ArrayList<ArrayList<Integer>> neighbors = new ArrayList<ArrayList<Integer>>();
		
		//File file = new File("D:\\AOS Codes\\Project_3_version\\src\\pack\\Configuration File.txt");
		File file = new File("pack/Configuration File.txt");
		
		try
		{
			BufferedReader reader = new BufferedReader(new FileReader(file));
			String line = null, tempnode = null, IPtemp = InetAddress.getLocalHost().getHostName();
			System.out.println("Current Machine:"+IPtemp);
			int tmpport = 0;
			while ((line = reader.readLine()) != null) 
		    {
		    	line = line.trim();
				if(line.isEmpty() || line.charAt(0) == '#')		//Skipping comments
				{
					continue;
				}
				else
				{
					// Tells the number of nodes
					if(line.length()==1)
					{
						n = Integer.parseInt(line);
						if(n<=0)
							System.exit(1);
					}
					else
					{
						// \n and \t, (new line) and (tab) act as delimiter for separating the token
						// added " " (space as delimiter)
						StringTokenizer st = new StringTokenizer(line," ");
			   	 		while(st.hasMoreTokens())
			   			{
			   	 			String temp = st.nextToken();
			   	 			// get the machines
			   	 			if(temp.charAt(0) == 'd')
			   	 			{
			   	 				count++;
			   	 				tempnode = temp;
			   	 				tempnode = tempnode.concat(".utdallas.edu");
			   	 				System.out.println("tempnode: "+tempnode);
			   	 				tmpport = Integer.parseInt(st.nextToken());
			   	 				node.add(tempnode);
			   	 				port.add(tmpport);
			   	 				
			   	 				if(tempnode.equals(IPtemp))
			   	 				{
			   	 					ArrayList<Integer> neigh = new ArrayList<Integer>();
			   	 					index.add(count);
			   	 					// Neighbors list
			   	 					while(st.hasMoreTokens())
			   	 					{
			   	 						int val = Integer.parseInt(st.nextToken())-1;
			   	 						if(val == count)
			   	 						{
			   	 							System.out.println("Cannot have self loops");
			   	 							continue;
			   	 						}
			   	 						else
			   	 						{
			   	 							neigh.add(val);
			   	 						}
			   	 					}
			   	 					if(!neigh.isEmpty())
			   	 					{
			   	 						neighbors.add(neigh);
			   	 					}
			   	 				}
			   	 				else
			   	 				{
			   	 					// To not include other node's neighbors
			   	 					while(st.hasMoreTokens())
			   	 					{
			   	 						st.nextToken();
			   	 					}
			   	 				}
			   	 			}
			   	 			// get the sequence of checkpoints and roll backs
			   	 			else
			   	 			{
			   	 				// Format - "process_index,c" or "process_index,r"
			   	 				sequence.add(temp);
			   	 				while(st.hasMoreTokens())
			   	 				{
			   	 					sequence.add(st.nextToken());
			   	 				}
			   	 			}
					    }
			    	}
				}
			}
			reader.close();	
			
		}			
		catch(IOException e)
		{
			System.out.println("Buffered Reader failed in main");
		}


		System.out.println("Machine : Port");
		for(int i = 0; i < node.size(); i++)
		{
			System.out.println(node.get(i)+" : "+port.get(i));
		}
		System.out.println("Sequence:");
		for(int i = 0; i < sequence.size(); i++)
		{
			System.out.print(sequence.get(i).split(",")[0]+","+sequence.get(i).split(",")[1]+" ");
		}
		System.out.println();
		for(int s = 0; s < index.size();s++)					//Creating server threads
		{
			// Create the common object
			Account acc = new Account(2000, neighbors.get(s).size(), node.size());
			FIFO fifo = new FIFO();
			for(int i = 0; i < neighbors.get(s).size(); i++)
			{
				System.out.print(neighbors.get(s).get(i)+",");
			}
			
			// Save the first checkpoint here, save to file
			// split works on regular expressions
			// split on (".") means any character
			char[] name = node.get(index.get(s)).toCharArray();
			String filename = new String();
			for(int i = 0; i < name.length; i++ )
			{
				if(name[i] == '.')
				{
					break;
				}
				filename = filename.concat(String.valueOf(name[i]));
			}
			filename = filename.concat("_"+port.get(index.get(s))+".txt");
			
			saveCheckpoint(filename, acc, index.get(s));
			Thread p = new Thread(new Process(node, port, neighbors.get(s), index.get(s), fifo, acc, sequence));
			Thread c = new Thread(new Connect_Thread(fifo, node, port));
			Thread a = new Thread(new Account_Thread(neighbors.get(s), index.get(s), fifo, acc));
			p.start();
			c.start();
			a.start();
		}
	}
	
	// Save the current state in file
	private static void saveCheckpoint(String filename, Account acc, int index)
	{
		try{
			File file = new File(filename);
			PrintWriter writer = new PrintWriter(new FileWriter(file,false));
			writer.print("# Checkpoint State of System: "+index);
			writer.flush();
			writer.print(new String("\nSEQ-"+0));
			writer.flush();
			writer.print(new String("\nAMT-"+acc.getAmount()));
			writer.flush();
			
			ArrayList<Integer> LLS = acc.getLLS();
			writer.print(new String("\nLLS-"));
			for(int i=0; i < LLS.size(); i++)
			{
				if(i == 0)
				{
					writer.print(LLS.get(i));
					continue;
				}
				writer.print(" "+LLS.get(i));
			}
			writer.flush();
			
			ArrayList<Integer> FLS = acc.getFLS();
			writer.print(new String("\nFLS-"));
			for(int i=0; i < FLS.size(); i++)
			{
				if(i == 0)
				{
					writer.print(FLS.get(i));
					continue;
				}
				writer.print(" "+FLS.get(i));
			}
			writer.flush();
			
			writer.print(new String("\nLLR-"));
			for(int i=0; i < FLS.size(); i++)
			{
				if(i == 0)
				{
					writer.print("0");
					continue;
				}
				writer.print(" 0");
			}
			writer.flush();
			
			writer.print(new String("\nCLK-"));
			ArrayList<Integer> vectorC = acc.getVectorC();
			for(int i = 0; i < vectorC.size(); i++)
			{
				if(i == 0)
				{
					writer.print(vectorC.get(i));
					continue;
				}
				writer.print(" "+vectorC.get(i));
			}
			writer.flush();
			
			ArrayList<String> sentM = acc.getSentM();
			writer.print(new String("\nSENT-"));
			if(sentM.isEmpty())
			{
				writer.print("NONE");
			}
			else
			{
				for(int i=0; i < sentM.size(); i++)
				{
					if(i == 0)
					{
						writer.print(sentM.get(i));
						continue;
					}
					writer.print(" "+sentM.get(i));
				}
			}
			writer.flush();
		}
		catch(IOException io)
		{
			io.printStackTrace();
		}
	}
}

/*
 * Application Module : Simulates Bank Transactions
 * 
 * Checkpoint
 * 
 * Recovery
 */
